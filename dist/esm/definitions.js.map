{"version":3,"file":"definitions.js","sourceRoot":"","sources":["../../src/definitions.ts"],"names":[],"mappings":"AAmBA,MAAM,CAAN,IAAY,wBAKX;AALD,WAAY,wBAAwB;IAClC,yFAAiB,CAAA;IACjB,mFAAc,CAAA;IACd,mFAAc,CAAA;IACd,2EAAU,CAAA;AACZ,CAAC,EALW,wBAAwB,KAAxB,wBAAwB,QAKnC","sourcesContent":["export type CalendarEventOptions = {\n  title?: string;\n  startDate?: number;\n  notes?: string;\n  location?: string;\n  endDate?: number;\n  isAllDay?: boolean;\n};\n\nexport type CalendarCreateEventOptions = CalendarEventOptions & {\n  title: string;\n  startDate: number;\n  fullAccess?: boolean;\n};\n\nexport type CalendarUpdateEventOptions = CalendarEventOptions & {\n  id: string;\n};\n\nexport enum CalendarPermissionResult {\n  NotDetermined = 0,\n  Authorized = 1,\n  Restricted = 2,\n  Denied = 3,\n}\n\nexport interface CalendarPlugin {\n  /**\n   * Request access to the calendar\n   *\n   * @param options Event options\n   */\n  requestAccess(options: {\n    fullAccess?: boolean;\n  }): Promise<{ result: CalendarPermissionResult }>;\n\n  /**\n   * Returns access level\n   *\n   * @param options Event options\n   */\n  hasAccess(options: {\n    fullAccess?: boolean;\n  }): Promise<{ result: CalendarPermissionResult }>;\n\n  /**\n   * Returns true when provided id exists in the calendar\n   *\n   * @param options Event options\n   */\n  hasEvent(options: { id: string }): Promise<{ result: boolean }>;\n\n  /**\n   * Open device calendar with pre-fill event using provided information\n   *\n   * @param options Event information\n   */\n  addEvent(options: CalendarCreateEventOptions): Promise<{ id: string }>;\n\n  /**\n   * Updates event with provided data by an id\n   *\n   * @param options Event information\n   */\n  updateEvent(options: CalendarUpdateEventOptions): Promise<{ id: string }>;\n\n  /**\n   * Removes an event by its id\n   *\n   * @param options Event options\n   */\n  removeEvent(options: { id: string }): Promise<{ result: boolean }>;\n}\n"]}